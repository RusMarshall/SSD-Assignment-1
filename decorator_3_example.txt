func Pascal_Triangle call for 1 executed in 4.630099999999859e-05 sec
Name:      Pascal_Triangle     
Type:      <class 'function'>  
Sign:      (n=5)               
Args:      positional(6,)      
           keyworded{}         
Doc                  Function that prints in console
           n lines of Pascals triangle
                               
           Keyword arguments:  
           :param n: number of printable lines (default 5)
Source:            def Pascal_Triangle(n = 5):
           """                 
           Function that prints in console
           n lines of Pascals triangle
                               
           Keyword arguments:  
           :param n: number of printable lines (default 5)
           """                 
           top = [1]           
           append_val = [0]    
           for _ in range(n):  
           print(top)          
           top = [l+r for l, r in zip(top+append_val, append_val + top)]
Output:            [1]                 
           [1, 1]              
           [1, 2, 1]           
           [1, 3, 3, 1]        
           [1, 4, 6, 4, 1]     
           [1, 5, 10, 10, 5, 1]
                               
func Pascal_Triangle call for 2 executed in 2.421500000000798e-05 sec
Name:      Pascal_Triangle     
Type:      <class 'function'>  
Sign:      (n=5)               
Args:      positional(4,)      
           keyworded{}         
Doc                  Function that prints in console
           n lines of Pascals triangle
                               
           Keyword arguments:  
           :param n: number of printable lines (default 5)
Source:            def Pascal_Triangle(n = 5):
           """                 
           Function that prints in console
           n lines of Pascals triangle
                               
           Keyword arguments:  
           :param n: number of printable lines (default 5)
           """                 
           top = [1]           
           append_val = [0]    
           for _ in range(n):  
           print(top)          
           top = [l+r for l, r in zip(top+append_val, append_val + top)]
Output:            [1]                 
           [1, 1]              
           [1, 2, 1]           
           [1, 3, 3, 1]        
                               
func Quadratic_equation_solver call for 1 executed in 1.5477999999999326e-05 sec
Name:      Quadratic_equation_solver
Type:      <class 'function'>  
Sign:      (a=1, b=1, c=1)     
Args:      positional(1, -2, -3)
           keyworded{}         
Doc                  Function that solves simple quadratic equation
           and prints the result as list in console:
                               
           ax^2+b*x+c=0        
                               
           Keyword arguments:  
           :param a: The first coefficient (default 1)
           :param b: The second coefficient (default 1)
           :param c: Free coefficient (default 1)
           :return:  None if param equals to 0
Source:            def Quadratic_equation_solver(a=1, b=1, c=1):
           """                 
           Function that solves simple quadratic equation
           and prints the result as list in console:
                               
           ax^2+b*x+c=0        
                               
           Keyword arguments:  
           :param a: The first coefficient (default 1)
           :param b: The second coefficient (default 1)
           :param c: Free coefficient (default 1)
           :return:  None if param equals to 0
           """                 
           if a == 0:          
           print("'a' value mustn't equals to 0!")
           return None         
                               
           discriminant = b ** 2 - 4 * a * c
           answers = list()    
                               
           if discriminant < 0:
           print("There are no real roots")
           elif discriminant == 0:
           answers.append(-b / 2 * a)
           print(answers)      
           else:               
           answers.append((-b + math.sqrt(discriminant)) / 2 * a)
           answers.append((-b - math.sqrt(discriminant)) / 2 * a)
           print(answers)      
Output:            [3.0, -1.0]         
                               
func Quadratic_equation_solver call for 2 executed in 1.8467000000008116e-05 sec
Name:      Quadratic_equation_solver
Type:      <class 'function'>  
Sign:      (a=1, b=1, c=1)     
Args:      positional(2, 5, 3) 
           keyworded{}         
Doc                  Function that solves simple quadratic equation
           and prints the result as list in console:
                               
           ax^2+b*x+c=0        
                               
           Keyword arguments:  
           :param a: The first coefficient (default 1)
           :param b: The second coefficient (default 1)
           :param c: Free coefficient (default 1)
           :return:  None if param equals to 0
Source:            def Quadratic_equation_solver(a=1, b=1, c=1):
           """                 
           Function that solves simple quadratic equation
           and prints the result as list in console:
                               
           ax^2+b*x+c=0        
                               
           Keyword arguments:  
           :param a: The first coefficient (default 1)
           :param b: The second coefficient (default 1)
           :param c: Free coefficient (default 1)
           :return:  None if param equals to 0
           """                 
           if a == 0:          
           print("'a' value mustn't equals to 0!")
           return None         
                               
           discriminant = b ** 2 - 4 * a * c
           answers = list()    
                               
           if discriminant < 0:
           print("There are no real roots")
           elif discriminant == 0:
           answers.append(-b / 2 * a)
           print(answers)      
           else:               
           answers.append((-b + math.sqrt(discriminant)) / 2 * a)
           answers.append((-b - math.sqrt(discriminant)) / 2 * a)
           print(answers)      
Output:            [-4.0, -6.0]        
                               
func Arithmetic_sequence call for 1 executed in 2.5502999999996168e-05 sec
Name:      Arithmetic_sequence 
Type:      <class 'function'>  
Sign:      (a0=0, d=1, n=5)    
Args:      positional(1, 4, 10)
           keyworded{}         
Doc                  Function that prints n lines of arithmetic sequence in console:
           a1 = a0 + d         
           a2 = a1 + d         
           ...                 
                               
           :param a0: the first member of the sequence (default 0)
           :param d:  the difference of the sequence (default 1)
           :param n:  total number of printable values of sequence (default 5)
Source:            def Arithmetic_sequence(a0=0, d=1, n=5):
           """                 
           Function that prints n lines of arithmetic sequence in console:
           a1 = a0 + d         
           a2 = a1 + d         
           ...                 
                               
           :param a0: the first member of the sequence (default 0)
           :param d:  the difference of the sequence (default 1)
           :param n:  total number of printable values of sequence (default 5)
           """                 
           sequence = list()   
           formula = lambda a, d, pos: a + pos * d
           for position in range(n):
           sequence.append(formula(a0, d, position))
           print(sequence)     
Output:            [1, 5, 9, 13, 17, 21, 25, 29, 33, 37]
                               
func Geometric_sequence call for 1 executed in 3.178099999999462e-05 sec
Name:      Geometric_sequence  
Type:      <class 'function'>  
Sign:      (b0=0, q=1, n=5)    
Args:      positional(2, 2, 10)
           keyworded{}         
Doc                  Function that prints n lines of geometric sequence in console:
           b1 = b0 * q         
           b2 = b1 * q         
           ...                 
                               
           :param b0: the first member of the sequence (default 0)
           :param q:  the denominator of the sequence (default 1)
           :param n:  total number of printable values of sequence (default 5)
Source:            def Geometric_sequence(b0=0, q=1, n=5):
           """                 
           Function that prints n lines of geometric sequence in console:
           b1 = b0 * q         
           b2 = b1 * q         
           ...                 
                               
           :param b0: the first member of the sequence (default 0)
           :param q:  the denominator of the sequence (default 1)
           :param n:  total number of printable values of sequence (default 5)
           """                 
           sequence = list()   
           formula = lambda b, q, pos: b * q ** pos
           for position in range(n):
           sequence.append(formula(b0, q, position))
           print(sequence)     
Output:            [2, 4, 8, 16, 32, 64, 128, 256, 512, 1024]
                               
func Geometric_sequence call for 2 executed in 6.902799999999876e-05 sec
Name:      Geometric_sequence  
Type:      <class 'function'>  
Sign:      (b0=0, q=1, n=5)    
Args:      positional(1, 3, 10)
           keyworded{}         
Doc                  Function that prints n lines of geometric sequence in console:
           b1 = b0 * q         
           b2 = b1 * q         
           ...                 
                               
           :param b0: the first member of the sequence (default 0)
           :param q:  the denominator of the sequence (default 1)
           :param n:  total number of printable values of sequence (default 5)
Source:            def Geometric_sequence(b0=0, q=1, n=5):
           """                 
           Function that prints n lines of geometric sequence in console:
           b1 = b0 * q         
           b2 = b1 * q         
           ...                 
                               
           :param b0: the first member of the sequence (default 0)
           :param q:  the denominator of the sequence (default 1)
           :param n:  total number of printable values of sequence (default 5)
           """                 
           sequence = list()   
           formula = lambda b, q, pos: b * q ** pos
           for position in range(n):
           sequence.append(formula(b0, q, position))
           print(sequence)     
Output:            [1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683]
                               
